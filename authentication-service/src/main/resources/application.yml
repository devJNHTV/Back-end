server:
  port: 8080
  servlet:
    context-path: /auth

idp:
  url: ${idp.url}
  client-id: ${idp.client-id}
  client-secret: ${idp.client-secret}
  realm: ${idp.realm}
aws:
  accessKey: ${aws.accessKey}
  secretKey:  ${aws.secretKey}
  s3:
    region: ${aws.s3.region}
    bucketName: ${aws.s3.bucketName}

spring:
  application:
    name: auth-service
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8180/realms/studyeasy
  datasource:
    url: ${datasource.url}
    username: ${datasource.username}
    password: ${datasource.password}
    hibernate:
      ddl-auto: update
    show-sql: false
  cloud:
    vault:
      kv:
        enabled: true  # Bật Vault Key-Value backend
      authentication: TOKEN  # Sử dụng token để xác thực
      token: myroot  # Token để xác thực với Vault
      scheme: http  # Giao thức HTTP
      host: 127.0.0.1  # Địa chỉ host, mặc định là localhost nếu không có biến môi trường DOCKER_HOST
      port: 8200  # Cổng kết nối đến Vault
  config:
      import: vault://secret/auth-service
  messages:
    basename:
      - i18n/messages
    encoding: UTF-8

  cache:
    type: redis
    redis:
      host: localhost
      port: 6379
      time-to-live: 600000 # 10 minutes

  data:
    web:
      pageable:
        default-page-size: 10
        max-page-size: 100

  kafka:
    bootstrap-servers: localhost:9094
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
dubbo:
  application:
    name: "auth-service"
    qos-enable: false
  protocol:
    name: "dubbo"
    port: -1
  registry:
    address: "zookeeper://${DOCKER_HOST:localhost}:2181"
logging:
  level:
    org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG
    org.springframework.data.redis.cache: DEBUG
    org.springframework.boot.autoconfigure.cache: DEBUG
    org.springframework.cloud.vault: DEBUG
  file:
    name: logs/access_log.log

temporal:
  service:
    address: localhost:7233  # Địa chỉ Temporal Server
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html  
resilience4j.circuitbreaker:
  instances:
    myCircuitBreaker:
      registerHealthIndicator: true
      failureRateThreshold: 50
      waitDurationInOpenState: 10s
      permittedNumberOfCallsInHalfOpenState: 3
      slidingWindowSize: 10
      slidingWindowType: COUNT_BASED
      minimumNumberOfCalls: 10

management:
  endpoints:
    web:
      exposure:
        include: prometheus,health
  endpoint:
    health:
      show-details: always
  tracing:
    sampling:
      probability: 0.8
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true

app:
  cors:
    allowed-origins: 
      - http://localhost:3000
      - http://localhost:8080
      - https://yourdomain.com



